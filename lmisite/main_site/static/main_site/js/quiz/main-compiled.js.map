{"version":3,"sources":["main.js"],"names":[],"mappings":"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","file":"main-compiled.js","sourcesContent":["'use strict';\nimport 'whatwg-fetch';\nimport * as Sentry from '@sentry/browser';\nimport React, {Component} from 'react';\nimport ReactDom from 'react-dom';\nimport {fetchGQL} from \"../../../../../common_js/graphql\";\nimport {Loader} from \"../../../../../common_js/Loader\";\nimport {Step} from \"./Step\";\n\n\nclass QuizApp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quiz: null,\n            loading: true,\n            error: null,\n            session_id: null,\n            current_step: null,\n        };\n        \n        this.startQuiz = this.startQuiz.bind(this);\n        this.nextStep = this.nextStep.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.quizId) {\n            fetchGQL(`query ($id: UUID!) {\n                allQuizzes(id: $id) {\n                    edges {\n                        node {\n                            id\n                            name\n                            introText\n                        }\n                    }\n                } \n            }`,\n                {id: this.props.quizId})\n                .then(res => this.setState({\n                    quiz: res.data.allQuizzes.edges[0] ? res.data.allQuizzes.edges[0].node : null,\n                    loading: false\n                }))\n                .catch(err => {\n                    console.error(err);\n                    this.setState({\n                        error: err,\n                    })\n                })\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({error});\n        Sentry.withScope(scope => {\n            Object.keys(errorInfo).forEach(key => {\n                scope.setExtra(key, errorInfo[key]);\n            });\n            Sentry.captureException(error);\n        });\n    }\n\n    startQuiz() {\n        this.setState({\n            loading: true\n        })\n        fetchGQL(`mutation ($input: CreateQuizSessionMutationInput!) {\n                createQuizSession(input: $input) {\n                    session {\n                        id\n                        currentStep {\n                            id\n                            style\n                            questionText\n                            maxChoices\n                            answers {\n                                edges {\n                                    node {\n                                        id\n                                        text\n                                        image\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } \n            }`,\n                {input: {\n                    quizId: this.state.quiz.id\n                    }})\n                .then(res => this.setState({\n                    session_id: res.data.createQuizSession.session.id,\n                    current_step: res.data.createQuizSession.session.currentStep,\n                    loading: false\n                }))\n                .catch(err => {\n                    console.error(err);\n                    this.setState({\n                        error: err,\n                    })\n                })\n    }\n\n    nextStep(answers) {\n        console.log(answers);\n        this.setState({\n            loading: true\n        })\n        fetchGQL(`mutation ($input: ProgressQuizSessionMutationInput!) {\n                progressQuizSession(input: $input) {\n                    session {\n                        currentStep {\n                            id\n                            style\n                            questionText\n                            maxChoices\n                            answers {\n                                edges {\n                                    node {\n                                        id\n                                        text\n                                        image\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } \n            }`,\n                {input: {\n                        sessionId: this.state.session_id,\n                        answerIds: answers\n                    }})\n                .then(res => this.setState({\n                    current_step: res.data.progressQuizSession.session.currentStep,\n                    loading: false\n                }))\n                .catch(err => {\n                    console.error(err);\n                    this.setState({\n                        error: err,\n                    })\n                })\n    }\n\n    render() {\n        if (this.state.error) {\n            return (\n                <React.Fragment>\n                    <h2>Sorry, there was an error</h2>\n                    <p><a className=\"button dark\" onClick={() => Sentry.showReportDialog()}>Report feedback</a></p>\n                </React.Fragment>\n            );\n        } else if (this.state.loading) {\n            return <Loader/>;\n        } else if (this.state.current_step) {\n            return <Step step={this.state.current_step} nextStep={this.nextStep}/>;\n        } else if (this.state.quiz) {\n            return (\n                <div className=\"StartPage\">\n                    <h2>{this.state.quiz.name}</h2>\n                    <p>{this.state.quiz.introText}</p>\n                    <p><a className=\"button dark\" onClick={this.startQuiz}>Take the quiz</a></p>\n                </div>\n            );\n        } else {\n            return null;\n        }\n    }\n}\n\nfunction QuizzBaseApp() {\n    let quizId = null;\n    if (window.quizConf) {\n        quizId = window.quizConf.id\n    }\n\n    return (\n        <QuizApp quizId={quizId}/>\n    );\n}\n\nSentry.init({\n    dsn: \"https://b147c96f835d46178e4690cbe872a4d7@sentry.io/1370209\"\n});\n\nconst domContainer = document.querySelector('#quiz-wrapper');\n\nReactDom.render(<QuizzBaseApp />, domContainer);\n"]}