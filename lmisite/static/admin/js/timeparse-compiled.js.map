{"version":3,"sources":["timeparse.js"],"names":[],"mappings":"aAAA,CAAC,UAAW,CACR,aACA,GAAI,GAAoB,CAEpB,CACI,GAAI,YADR,CAEI,QAAS,mBAAe,OACG,EAAnB,KAAK,CAAL,EAAQ,MADQ,CAET,IAAM,EAAK,CAAL,CAAN,CAAgB,KAFP,CAIT,EAAK,CAAL,EAAU,KAExB,CARL,CAFoB,CAapB,CACI,GAAI,mBADR,CAEI,QAAS,mBAAe,CACpB,MAAO,GAAK,CAAL,EAAQ,OAAR,CAAgB,GAAhB,CAAqB,GAArB,CACV,CAJL,CAboB,CAoBpB,CACI,GAAI,gBADR,CAEI,QAAS,mBAAe,CACpB,MAAO,IAAM,EAAK,CAAL,EAAQ,OAAR,CAAgB,GAAhB,CAAqB,GAArB,CAChB,CAJL,CApBoB,CA2BpB,CACI,GAAI,6BADR,CAEI,QAAS,mBAAe,CACpB,GAAI,GAAO,SAAS,EAAK,CAAL,CAAT,CAAX,CADoB,MAEP,GAAT,IAFgB,GAGhB,EAAO,CAHS,EAKU,GAA1B,KAAK,CAAL,EAAQ,WAAR,EALgB,EAMH,EAAT,IANY,GAOZ,EAAO,CAPK,EASR,EAAO,EAAR,CAAc,KATL,EAWL,EAAP,EAXY,CAYL,MAAa,KAZR,CAcL,EAAO,KAGzB,CAnBL,CA3BoB,CAiDpB,CACI,GAAI,mCADR,CAEI,QAAS,mBAAe,CACpB,GAAI,GAAO,SAAS,EAAK,CAAL,CAAT,CAAX,CACI,EAAO,SAAS,EAAK,CAAL,CAAT,CADX,CADoB,MAGT,GAAP,EAHgB,GAIhB,EAAO,KAJS,EAMP,EAAT,IANgB,GAOhB,EAAO,CAPS,EASU,GAA1B,KAAK,CAAL,EAAQ,WAAR,EATgB,EAUH,EAAT,IAVY,GAWZ,EAAO,CAXK,EAaR,EAAO,EAAR,CAAc,GAAd,EAbS,EAeL,EAAP,EAfY,CAgBL,MAAa,GAAb,EAhBK,CAkBL,EAAO,GAAP,EAGlB,CAvBL,CAjDoB,CA2EpB,CACI,GAAI,MADR,CAEI,QAAS,kBAAe,CACpB,MAAO,OACV,CAJL,CA3EoB,CAkFpB,CACI,GAAI,OADR,CAEI,QAAS,kBAAe,CACpB,MAAO,OACV,CAJL,CAlFoB,CAAxB,CAsGA,OAAO,eAAP,CAZA,WAA4B,CACxB,IAAK,GAAI,GAAI,CAAb,CAAgB,EAAI,EAAkB,MAAtC,CAA8C,GAA9C,CAAmD,CAC/C,GAAI,GAAK,KAAqB,EAA9B,CACI,EAAU,KAAqB,OADnC,CAEI,EAAO,EAAG,IAAH,GAFX,CAGA,KACI,MAAO,KAEd,CACD,QACH,CAGJ,CAzGD,G","file":"timeparse-compiled.js","sourcesContent":["(function() {\n    'use strict';\n    var timeParsePatterns = [\n        // 9\n        {\n            re: /^\\d{1,2}$/i,\n            handler: function(bits) {\n                if (bits[0].length === 1) {\n                    return '0' + bits[0] + ':00';\n                } else {\n                    return bits[0] + ':00';\n                }\n            }\n        },\n        // 13:00\n        {\n            re: /^\\d{2}[:.]\\d{2}$/i,\n            handler: function(bits) {\n                return bits[0].replace('.', ':');\n            }\n        },\n        // 9:00\n        {\n            re: /^\\d[:.]\\d{2}$/i,\n            handler: function(bits) {\n                return '0' + bits[0].replace('.', ':');\n            }\n        },\n        // 3 am / 3 a.m. / 3am\n        {\n            re: /^(\\d+)\\s*([ap])(?:.?m.?)?$/i,\n            handler: function(bits) {\n                var hour = parseInt(bits[1]);\n                if (hour === 12) {\n                    hour = 0;\n                }\n                if (bits[2].toLowerCase() === 'p') {\n                    if (hour === 12) {\n                        hour = 0;\n                    }\n                    return (hour + 12) + ':00';\n                } else {\n                    if (hour < 10) {\n                        return '0' + hour + ':00';\n                    } else {\n                        return hour + ':00';\n                    }\n                }\n            }\n        },\n        // 3.30 am / 3:15 a.m. / 3.00am\n        {\n            re: /^(\\d+)[.:](\\d{2})\\s*([ap]).?m.?$/i,\n            handler: function(bits) {\n                var hour = parseInt(bits[1]);\n                var mins = parseInt(bits[2]);\n                if (mins < 10) {\n                    mins = '0' + mins;\n                }\n                if (hour === 12) {\n                    hour = 0;\n                }\n                if (bits[3].toLowerCase() === 'p') {\n                    if (hour === 12) {\n                        hour = 0;\n                    }\n                    return (hour + 12) + ':' + mins;\n                } else {\n                    if (hour < 10) {\n                        return '0' + hour + ':' + mins;\n                    } else {\n                        return hour + ':' + mins;\n                    }\n                }\n            }\n        },\n        // noon\n        {\n            re: /^no/i,\n            handler: function(bits) {\n                return '12:00';\n            }\n        },\n        // midnight\n        {\n            re: /^mid/i,\n            handler: function(bits) {\n                return '00:00';\n            }\n        }\n    ];\n\n    function parseTimeString(s) {\n        for (var i = 0; i < timeParsePatterns.length; i++) {\n            var re = timeParsePatterns[i].re;\n            var handler = timeParsePatterns[i].handler;\n            var bits = re.exec(s);\n            if (bits) {\n                return handler(bits);\n            }\n        }\n        return s;\n    }\n\n    window.parseTimeString = parseTimeString;\n})();\n"]}